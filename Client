class Client:
    def __init__(self, client_id: int, full_name: str, passport_data: str, contact_number: str, address: str):
        self.__client_id = client_id
        self.__full_name = self.validate_and_set("validate_full_name", full_name)
        self.__passport_data = self.validate_and_set("validate_passport_data", passport_data)
        self.__contact_number = self.validate_and_set("validate_contact_number", contact_number)
        self.__address = self.validate_and_set("validate_address", address)

    # Getters
    def get_client_id(self):
        return self.__client_id

    def get_full_name(self):
        return self.__full_name

    def get_passport_data(self):
        return self.__passport_data

    def get_contact_number(self):
        return self.__contact_number

    def get_address(self):
        return self.__address

    # Setters
    def set_full_name(self, full_name: str):
        self.__full_name = self.validate_and_set("validate_full_name", full_name)

    def set_passport_data(self, passport_data: str):
        self.__passport_data = self.validate_and_set("validate_passport_data", passport_data)

    def set_contact_number(self, contact_number: str):
        self.__contact_number = self.validate_and_set("validate_contact_number", contact_number)

    def set_address(self, address: str):
        self.__address = self.validate_and_set("validate_address", address) 

# Устранение повтора валидации, с помощью главного метода
    @staticmethod
    def validate_and_set(validation_method: str, value: str):
        validator = getattr(Client, validation_method, None)
        if not validator or not validator(value):
            raise ValueError(f"Invalid value for {validation_method.replace('validate_', '')}")
        return value

#Методы валидации
    @staticmethod
    def validate_full_name(full_name: str) -> bool:
        return bool(full_name) and full_name.replace(" ", "").isalpha()

    @staticmethod
    def validate_passport_data(passport_data: str) -> bool:
#Паспортные данные идут в формате букв-цифр и имеют определенную длину
        return bool(re.fullmatch(r"\w{10}", passport_data))

@staticmethod
    def validate_contact_number(contact_number: str) -> bool:
#Тут номер пишется в допустимом формате
        return bool(re.fullmatch(r"\+?\d{10,15}", contact_number))

    @staticmethod
    def validate_address(address: str) -> bool:
        return bool(address)

